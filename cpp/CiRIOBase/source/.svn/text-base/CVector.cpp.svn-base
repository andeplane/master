#include "Stdafx.h"

#include <CVector.h>

CVector CVector::FloorColor()
{
  if (x>255) x = 255;
  if (y>255) y = 255;
  if (z>255) z = 255;
  if (x<-255) x = -255;
  if (y<-255) y = -255;
  if (z<-255) z = -255;
  return *this;
}


CVector::CVector(const double& px, const double& py, const double& pz)
  {
    x = px;
    y = py;
    z = pz;
  }
 CVector::CVector(const CVector& v)
   {
     x=v.x;
     y=v.y;
     z=v.z;
   }
 
 
 
CVector CVector::glMatMul(float* pm) {
       
      CVector res;
       
      res.x = pm[0] * x + 
              pm[1] * y +       
              pm[2] * z;  

      res.y = pm[4] * x + 
              pm[5] * y +       
              pm[6] * z;       

      res.z = pm[8] * x + 
              pm[9] * y +       
              pm[10] * z;       
      return res;
}

CVector CVector::glMatMul(float* pm, float& w) {
       
      CVector res;
       
      res.x = pm[0] * x + 
              pm[1] * y +       
              pm[2] * z;  

      res.y = pm[4] * x + 
              pm[5] * y +       
              pm[6] * z;       

      res.z = pm[8] * x + 
              pm[9] * y +       
              pm[10] * z;       

      w = pm[12] * (float)x + 
	  pm[13] * (float)y +       
	  pm[14] * (float)z +
	  (float)(pm[15] * 1.0f);       

    return res;
}


CVector CVector::glMatMul_flip(float* pm) {
       
      CVector res;
       
      res.x = pm[0] * x + 
              pm[4] * y +       
              pm[8] * z;  

      res.y = pm[1] * x + 
              pm[5] * y +       
              pm[9] * z;       

      res.z = pm[2] * x + 
              pm[6] * y +       
              pm[10] * z;       

      return res;
}

 
 
 CVector CVector::rotateY(double t) {
   return   CVector(x * cos(t) - z * sin(t) ,y, x*sin(t) + z*cos(t));
 }

CVector CVector::rotateX(double t) {
   return   CVector(x, y * cos(t) - z * sin(t), y*sin(t) + z*cos(t));
 }

CVector CVector::rotateZ(double t) {
   return   CVector(x * cos(t) - y * sin(t), x*sin(t) + y*cos(t),z);
 }


double CVector::distance_from_plane(CVector& plane_normal, CVector& V) {
       return plane_normal.Dot(*this - V);       
}

 void CVector::Inverse()
   {
     x=-x;y=-y;z=-z;
   }
 
 CVector CVector::operator*(double scale)
   {
     return CVector(x * scale, y * scale, z * scale);
   }

 CVector CVector::Mul(const CVector& v)
   {
     return CVector(x * v.x, y * v.y, z * v.z);
   }
 
void CVector::Mul(CMatrix& m)
{
  double xt = m.M[0][0] * x + m.M[1][0] * y + m.M[2][0] * z; 
  double yt = m.M[0][1] * x + m.M[1][1] * y + m.M[2][1] * z; 
  double zt = m.M[0][2] * x + m.M[1][2] * y + m.M[2][2] * z; 
  x = xt; y = yt; z = zt;
  
  }

 CVector CVector::operator/(double scale)
   {
     return CVector(x / scale, y / scale, z / scale);
   }
 

 CVector CVector::operator/(const CVector& o)
   {
     return CVector(x / o.x, y / o.y, z / o.z);
   }
 
    
 void CVector::Set(double px, double py, double pz)
   {
     x = px; y=py; z = pz;
   }
 void CVector::Set(const CVector& v)
   {
     x = v.x; y=v.y; z = v.z;
   }
 
 double CVector::Length()
   {
     return sqrt((x*x + y*y + z*z));
   }
 
 double CVector::Length2()
   {
     return ((x*x + y*y + z*z));
   }
 

bool CVector::get_plane_equation(CVector p0, CVector p1, CVector p2, double* eq)
{
	// following two expressions order of arguments is very important 
	// still we need to keep plane's positive normal in plane's equation	
    CVector v0 = p0-p1;
    CVector v1 = p2-p1;
    CVector n;
    n = v0.Cross(v1).Normalize();

	
    double &A = eq[0], &B = eq[1], &C = eq[2], &D = eq[3];
	
	// positive normal
    A = n.x; 
    B = n.y; 
    C = n.z;
	// Here instead of p0, p1 and p2 can be used as well since they all belong to this plane
    D = - (A*p0.x + B*p0.y + C*p0.z);
    return true;
}


CVector CVector::Normalize()
   {
          double length = Length();
     if (length!=0)
	     return *this/length;
		 return CVector(0,0,0);
  }
 
 double CVector::Dot( const CVector& o)
   {
     return (double)(x*o.x + y*o.y + z*o.z);
   }
 

  CVector CVector::operator+(const CVector& a)
   {
     return CVector(a.x +x, a.y+y, a.z+z);
   }
 
  CVector CVector::operator-(const CVector& a)
   {
     return CVector(a.x - x, a.y-y, a.z-z);    
   }


 CVector CVector::Cross(CVector o)
   {
	return CVector(o.y*z - o.z*y, o.z*x - o.x*z, o.x*y - o.y*x);
   }
 
CVector CVector::from_spherical() {
  return CVector( cos(y)*sin(x), sin(y)*sin(x), cos(x)).Normalize() * z;             
}


CVector CVector::Interpolate(CVector& v1, CVector& v2, CVector& v3, const double& val) {
  // val is between 0 and 1, 0.5 = v2
  double sc1,sc2,sc0;
  if (val<=0.5) {
      sc2 = 0.0;
      sc1 = 2.0*val;
      sc0 = 1.0-sc1;
    }
    else
      {
	double v = val - 0.5;
	sc1 = 1.0 - (2*v);
	sc2 = 1.0 - sc1;
	sc0 = 0.0;
      }

      
    return v1 * sc0 +v2 * sc1 + v3 * sc2;

}  


